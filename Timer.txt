library IEEE;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Timer is
    Port (
        CLOCK_50 : in STD_LOGIC;
        Reset : in STD_LOGIC;
        Enable : in STD_LOGIC;
        HEX0 : out STD_LOGIC_VECTOR(6 downto 0);
        HEX1 : out STD_LOGIC_VECTOR(6 downto 0);
        HEX2 : out STD_LOGIC_VECTOR(6 downto 0)
    );
end Timer;

architecture Behaviour of Timer is
    signal ones, tens, mins : std_logic_vector(3 downto 0);
    signal ones_enable, tens_enable, mins_enable, seconds_reset, slow_clk : std_logic;
    signal ones_reset, tens_reset, mins_reset : std_logic_vector(3 downto 0);
    
    -- BCD counter components for each digit
    component BCD_counter is
        Port (
         Clk  : in  std_logic;
         Reset     : in  std_logic;  -- synchronous reset
         Enable    : in  std_logic;  -- enable counting
         Direction : in  std_logic;  -- '1' = up, '0' = down
         Q_out     : out std_logic_vector(3 downto 0)
        );
    end component;
    
    -- BCD to 7-segment display conversion component
    component BCD_to_SevenSeg is
        Port (
            BCD_digit : in std_logic_vector(3 downto 0);
            SevenSeg_out : out std_logic_vector(6 downto 0)
        );
    end component;
	 
	     -- BCD to 7-segment display conversion component
    component clock_divider is
        Port (
            clk,reset: in std_logic;
				clock_out: out std_logic
        );
    end component;


begin



    -- BCD counters for ones, tens, and minutes
    BCD_Ones : BCD_counter port map (
        Clk => slow_clk,
        Direction => '1',  -- count up
	Reset => Reset or seconds_reset,
        Enable => Enable,
        Q_Out => ones
    );

    BCD_Tens : BCD_counter port map (
        Clk => slow_clk,
        Direction => '1',  -- count up
		  Reset => Reset or seconds_reset,
        Enable => ones_enable,
        Q_Out => tens
    );

    BCD_Mins : BCD_counter port map (
        Clk => slow_clk,
        Direction => '1',  -- count up
        Reset => Reset,
        Enable => tens_enable,
        Q_Out => mins
    );

    -- Logic for enabling the next digit
    ones_enable <= '1' when (ones = "1001") else '0';
    tens_enable <= '1' when (tens = "0101" and ones = "1001") else '0';
	 seconds_reset <= '1' when (tens = "0101" and ones = "1001") else '0';
	 
	 
    -- Convert BCD digits to 7-segment display
    BCD_to_SevenSeg_ones : BCD_to_SevenSeg port map (
        BCD_digit => ones,
        SevenSeg_out => HEX0
    );
    
    BCD_to_SevenSeg_tens : BCD_to_SevenSeg port map (
        BCD_digit => tens,
        SevenSeg_out => HEX1
    );
    
    BCD_to_SevenSeg_mins : BCD_to_SevenSeg port map (
        BCD_digit => mins,
        SevenSeg_out => HEX2
    );
	 
	 Clk_Divider : Clock_Divider port map(clk => CLOCK_50, reset => '0', Clock_Out => slow_clk);
    
end Behaviour;